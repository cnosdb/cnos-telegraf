// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: kv_service.proto

package kv_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TSKVService_WritePoints_FullMethodName       = "/kv_service.TSKVService/WritePoints"
	TSKVService_WriteSubscription_FullMethodName = "/kv_service.TSKVService/WriteSubscription"
)

// TSKVServiceClient is the client API for TSKVService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TSKVServiceClient interface {
	// CnosDB subscription v3 API.
	WritePoints(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WritePointsRequest, WritePointsResponse], error)
	// CnosDB subscription v4 API.
	WriteSubscription(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscriptionRequest, SubscriptionResponse], error)
}

type tSKVServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTSKVServiceClient(cc grpc.ClientConnInterface) TSKVServiceClient {
	return &tSKVServiceClient{cc}
}

func (c *tSKVServiceClient) WritePoints(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[WritePointsRequest, WritePointsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TSKVService_ServiceDesc.Streams[0], TSKVService_WritePoints_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WritePointsRequest, WritePointsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TSKVService_WritePointsClient = grpc.BidiStreamingClient[WritePointsRequest, WritePointsResponse]

func (c *tSKVServiceClient) WriteSubscription(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SubscriptionRequest, SubscriptionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TSKVService_ServiceDesc.Streams[1], TSKVService_WriteSubscription_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscriptionRequest, SubscriptionResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TSKVService_WriteSubscriptionClient = grpc.BidiStreamingClient[SubscriptionRequest, SubscriptionResponse]

// TSKVServiceServer is the server API for TSKVService service.
// All implementations must embed UnimplementedTSKVServiceServer
// for forward compatibility.
type TSKVServiceServer interface {
	// CnosDB subscription v3 API.
	WritePoints(grpc.BidiStreamingServer[WritePointsRequest, WritePointsResponse]) error
	// CnosDB subscription v4 API.
	WriteSubscription(grpc.BidiStreamingServer[SubscriptionRequest, SubscriptionResponse]) error
	mustEmbedUnimplementedTSKVServiceServer()
}

// UnimplementedTSKVServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTSKVServiceServer struct{}

func (UnimplementedTSKVServiceServer) WritePoints(grpc.BidiStreamingServer[WritePointsRequest, WritePointsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WritePoints not implemented")
}
func (UnimplementedTSKVServiceServer) WriteSubscription(grpc.BidiStreamingServer[SubscriptionRequest, SubscriptionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WriteSubscription not implemented")
}
func (UnimplementedTSKVServiceServer) mustEmbedUnimplementedTSKVServiceServer() {}
func (UnimplementedTSKVServiceServer) testEmbeddedByValue()                     {}

// UnsafeTSKVServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TSKVServiceServer will
// result in compilation errors.
type UnsafeTSKVServiceServer interface {
	mustEmbedUnimplementedTSKVServiceServer()
}

func RegisterTSKVServiceServer(s grpc.ServiceRegistrar, srv TSKVServiceServer) {
	// If the following call pancis, it indicates UnimplementedTSKVServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TSKVService_ServiceDesc, srv)
}

func _TSKVService_WritePoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TSKVServiceServer).WritePoints(&grpc.GenericServerStream[WritePointsRequest, WritePointsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TSKVService_WritePointsServer = grpc.BidiStreamingServer[WritePointsRequest, WritePointsResponse]

func _TSKVService_WriteSubscription_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TSKVServiceServer).WriteSubscription(&grpc.GenericServerStream[SubscriptionRequest, SubscriptionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TSKVService_WriteSubscriptionServer = grpc.BidiStreamingServer[SubscriptionRequest, SubscriptionResponse]

// TSKVService_ServiceDesc is the grpc.ServiceDesc for TSKVService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TSKVService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kv_service.TSKVService",
	HandlerType: (*TSKVServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WritePoints",
			Handler:       _TSKVService_WritePoints_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "WriteSubscription",
			Handler:       _TSKVService_WriteSubscription_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "kv_service.proto",
}
