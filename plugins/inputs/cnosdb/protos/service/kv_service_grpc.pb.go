// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: protos/service/kv_service.proto

package kv_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TSKVService_WriteSubscription_FullMethodName = "/kv_service.TSKVService/WriteSubscription"
)

// TSKVServiceClient is the client API for TSKVService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TSKVServiceClient interface {
	WriteSubscription(ctx context.Context, opts ...grpc.CallOption) (TSKVService_WriteSubscriptionClient, error)
}

type tSKVServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTSKVServiceClient(cc grpc.ClientConnInterface) TSKVServiceClient {
	return &tSKVServiceClient{cc}
}

func (c *tSKVServiceClient) WriteSubscription(ctx context.Context, opts ...grpc.CallOption) (TSKVService_WriteSubscriptionClient, error) {
	stream, err := c.cc.NewStream(ctx, &TSKVService_ServiceDesc.Streams[0], TSKVService_WriteSubscription_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tSKVServiceWriteSubscriptionClient{stream}
	return x, nil
}

type TSKVService_WriteSubscriptionClient interface {
	Send(*SubscriptionRequest) error
	Recv() (*SubscriptionResponse, error)
	grpc.ClientStream
}

type tSKVServiceWriteSubscriptionClient struct {
	grpc.ClientStream
}

func (x *tSKVServiceWriteSubscriptionClient) Send(m *SubscriptionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tSKVServiceWriteSubscriptionClient) Recv() (*SubscriptionResponse, error) {
	m := new(SubscriptionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TSKVServiceServer is the server API for TSKVService service.
// All implementations must embed UnimplementedTSKVServiceServer
// for forward compatibility
type TSKVServiceServer interface {
	WriteSubscription(TSKVService_WriteSubscriptionServer) error
	mustEmbedUnimplementedTSKVServiceServer()
}

// UnimplementedTSKVServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTSKVServiceServer struct {
}

func (UnimplementedTSKVServiceServer) WriteSubscription(TSKVService_WriteSubscriptionServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteSubscription not implemented")
}
func (UnimplementedTSKVServiceServer) mustEmbedUnimplementedTSKVServiceServer() {}

// UnsafeTSKVServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TSKVServiceServer will
// result in compilation errors.
type UnsafeTSKVServiceServer interface {
	mustEmbedUnimplementedTSKVServiceServer()
}

func RegisterTSKVServiceServer(s grpc.ServiceRegistrar, srv TSKVServiceServer) {
	s.RegisterService(&TSKVService_ServiceDesc, srv)
}

func _TSKVService_WriteSubscription_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TSKVServiceServer).WriteSubscription(&tSKVServiceWriteSubscriptionServer{stream})
}

type TSKVService_WriteSubscriptionServer interface {
	Send(*SubscriptionResponse) error
	Recv() (*SubscriptionRequest, error)
	grpc.ServerStream
}

type tSKVServiceWriteSubscriptionServer struct {
	grpc.ServerStream
}

func (x *tSKVServiceWriteSubscriptionServer) Send(m *SubscriptionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tSKVServiceWriteSubscriptionServer) Recv() (*SubscriptionRequest, error) {
	m := new(SubscriptionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TSKVService_ServiceDesc is the grpc.ServiceDesc for TSKVService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TSKVService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kv_service.TSKVService",
	HandlerType: (*TSKVServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WriteSubscription",
			Handler:       _TSKVService_WriteSubscription_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/service/kv_service.proto",
}
